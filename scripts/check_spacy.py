"""–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SpaCy –º–æ–¥–µ–ª–∏"""

import sys
from pathlib import Path

from semantic_search.config import SPACY_MODEL


def check_spacy_model(model_name=SPACY_MODEL):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ SpaCy –º–æ–¥–µ–ª–∏"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ {model_name}")
    print("=" * 50)

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SpaCy
    try:
        import spacy

        print(f"‚úÖ SpaCy —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –≤–µ—Ä—Å–∏—è {spacy.__version__}")
    except ImportError:
        print("‚ùå SpaCy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ (–≤ –æ–¥–Ω–æ–º —à–∞–≥–µ)
    try:
        nlp = spacy.load(model_name)
        print(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} –Ω–∞–π–¥–µ–Ω–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
        print(f"üìä –°–ª–æ–≤–∞—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç: {len(nlp.vocab)} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìã –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {nlp.component_names}")

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
        try:
            model_path = nlp.meta.get("lang", "unknown")
            print(f"üóÇÔ∏è –Ø–∑—ã–∫ –º–æ–¥–µ–ª–∏: {model_path}")
            print(f"üìñ –í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏: {nlp.meta.get('version', 'unknown')}")
        except:  # noqa: E722
            pass

        # 3. –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
        test_text = "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
        doc = nlp(test_text)

        tokens = [token.lemma_ for token in doc if not token.is_stop and token.is_alpha]
        print(f"üß™ –¢–µ—Å—Ç –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {tokens[:8]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8

        sentences = [sent.text.strip() for sent in doc.sents]
        print(f"üìù –¢–µ—Å—Ç —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {len(sentences)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")

        return True

    except OSError:
        print(f"‚ùå –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("üí° –ú–æ–¥–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –º–æ–¥–µ–ª—å—é: {e}")
        return False


def show_available_models():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ SpaCy"""
    try:
        import subprocess

        print("\nüì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ SpaCy:")

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ spacy validate
        result = subprocess.run(
            [sys.executable, "-m", "spacy", "validate"], capture_output=True, text=True
        )

        if result.returncode == 0:
            print(result.stdout)
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")


def show_spacy_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ SpaCy"""
    try:
        import spacy

        print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ SpaCy:")
        print(f"   –í–µ—Ä—Å–∏—è: {spacy.__version__}")
        print(f"   –ü—É—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {Path(spacy.__file__).parent}")

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        try:
            import subprocess

            result = subprocess.run(
                [sys.executable, "-m", "spacy", "info"], capture_output=True, text=True
            )

            if result.returncode == 0:
                print("\nüîß –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                lines = result.stdout.split("\n")
                for line in lines:
                    if any(
                        key in line.lower() for key in ["version", "platform", "python"]
                    ):
                        print(f"   {line.strip()}")
        except:  # noqa: E722
            pass

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")


def get_model_download_command(model_name=SPACY_MODEL):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏"""
    return [
        f"poetry run python -m spacy download {model_name}",
    ]


if __name__ == "__main__":
    model_installed = check_spacy_model()

    if not model_installed:
        print("\nüí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        for cmd in get_model_download_command():
            print(f"   {cmd}")

    show_spacy_info()
    show_available_models()
