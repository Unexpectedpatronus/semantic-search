#!/usr/bin/env python
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""

import os
from datetime import datetime
from pathlib import Path


def should_include_file(file_path: Path, output_file: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å —Ñ–∞–π–ª"""

    # –í–ê–ñ–ù–û: –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞!
    if file_path.name == output_file or file_path.name == "project_export.txt":
        return False

    # –ò—Å–∫–ª—é—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
    if file_path.name.startswith("project_export") and file_path.suffix == ".txt":
        return False

    # –ò—Å–∫–ª—é—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    exclude_dirs = {
        "__pycache__",
        ".git",
        ".venv",
        "venv",
        ".env",
        "dist",
        "build",
        ".pytest_cache",
        ".mypy_cache",
        "node_modules",
        ".idea",
        ".vscode",
        "logs",
        "data/models",
        "data/cache",
        "data/temp",
        ".ruff_cache",
        "htmlcov",
        ".coverage",
    }

    # –ò—Å–∫–ª—é—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    exclude_extensions = {
        ".pyc",
        ".pyo",
        ".pyd",
        ".so",
        ".dll",
        ".dylib",
        ".exe",
        ".bin",
        ".pkl",
        ".npy",
        ".model",
        ".log",
        ".tmp",
        ".cache",
        ".lock",
        ".db",
        ".zip",
        ".tar",
        ".gz",
        ".rar",
        ".7z",
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for parent in file_path.parents:
        if parent.name in exclude_dirs:
            return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    if file_path.suffix in exclude_extensions:
        return False

    # –ò—Å–∫–ª—é—á–∞–µ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã (–±–æ–ª—å—à–µ 1MB)
    try:
        if file_path.is_file() and file_path.stat().st_size > 1_000_000:
            return False
    except:
        return False

    return True


def collect_project_files(root_path: Path, output_file: str) -> list[Path]:
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å"""
    included_files = []
    seen_paths = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∞–π–ª–æ–≤
    priority_order = [
        "pyproject.toml",
        "README.md",
        "LICENSE",
        ".gitignore",
        "src/semantic_search/__init__.py",
        "src/semantic_search/config.py",
        "src/semantic_search/main.py",
        "src/semantic_search/core",
        "src/semantic_search/gui",
        "src/semantic_search/utils",
        "src/semantic_search/evaluation",
        "scripts",
        "tests",
    ]

    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for path in root_path.rglob("*"):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        abs_path = path.absolute()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª
        if abs_path in seen_paths:
            continue

        if path.is_file() and should_include_file(path, output_file):
            included_files.append(path)
            seen_paths.add(abs_path)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    def get_sort_key(file_path: Path):
        rel_path = str(file_path.relative_to(root_path)).replace("\\", "/")

        # –ò—â–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        for i, priority in enumerate(priority_order):
            if rel_path == priority or rel_path.startswith(priority + "/"):
                return (i, rel_path)

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–æ–Ω–µ—Ü
        return (len(priority_order), rel_path)

    included_files.sort(key=get_sort_key)

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    unique_files = []
    seen_contents = set()

    for file_path in included_files:
        file_key = (file_path.name, file_path.stat().st_size)
        if file_key not in seen_contents:
            unique_files.append(file_path)
            seen_contents.add(file_key)

    return unique_files


def export_project(output_file: str = "project_export.txt", include_data: bool = False):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
    project_root = Path(__file__).parent.parent

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    output_path = Path(output_file)
    if output_path.exists():
        print(f"üóëÔ∏è  –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞: {output_file}")
        output_path.unlink()

    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã
    print("üìÇ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...")
    all_files = collect_project_files(project_root, output_file)

    # –§–∏–ª—å—Ç—Ä—É–µ–º data —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã
    if not include_data:
        all_files = [
            f for f in all_files if "data" not in f.parts or f.name == ".gitkeep"
        ]

    print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {len(all_files)}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    file_names = [f.name for f in all_files]
    duplicates = [name for name in file_names if file_names.count(name) > 1]
    if duplicates:
        print(f"‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ñ–∞–π–ª—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏: {set(duplicates)}")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    with open(output_file, "w", encoding="utf-8") as f:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        f.write("=" * 80 + "\n")
        f.write("SEMANTIC SEARCH PROJECT EXPORT\n")
        f.write(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"Root: {project_root}\n")
        f.write("=" * 80 + "\n\n")

        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)
        f.write("PROJECT STRUCTURE:\n")
        f.write("-" * 40 + "\n")

        current_dir = None
        for file_path in all_files:
            rel_path = file_path.relative_to(project_root)
            parent_dir = rel_path.parent

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–∏ —Å–º–µ–Ω–µ
            if parent_dir != current_dir:
                current_dir = parent_dir
                if str(parent_dir) != ".":
                    f.write(f"\n{parent_dir}/\n")
                else:
                    f.write("\n[root]\n")

            f.write(f"  - {file_path.name}\n")

        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
        f.write("\n" + "=" * 80 + "\n")
        f.write("FILE CONTENTS:\n")
        f.write("=" * 80 + "\n")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
        written_files = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

        for file_path in all_files:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ñ–∞–π–ª–∞
            file_key = str(file_path.absolute())

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏ –ª–∏ —É–∂–µ
            if file_key in written_files:
                print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç: {file_path.relative_to(project_root)}")
                continue

            written_files.add(file_key)
            rel_path = file_path.relative_to(project_root)

            f.write(f"\n\n{'=' * 40}\n")
            f.write(f"FILE: {rel_path}\n")
            f.write(f"{'=' * 40}\n")

            try:
                # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
                if file_path.suffix in [
                    ".py",
                    ".toml",
                    ".md",
                    ".txt",
                    ".json",
                    ".yaml",
                    ".yml",
                    ".bat",
                    ".sh",
                    ".cfg",
                    ".ini",
                ]:
                    content = file_path.read_text(encoding="utf-8", errors="ignore")
                    f.write(content)
                    if not content.endswith("\n"):
                        f.write("\n")
                else:
                    # –ë–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã
                    f.write(f"[Binary file - {file_path.stat().st_size} bytes]\n")

            except Exception as e:
                f.write(f"[Error reading file: {e}]\n")

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        f.write("\n" + "=" * 80 + "\n")
        f.write("EXPORT SUMMARY:\n")
        f.write("-" * 40 + "\n")
        f.write(f"Total files included: {len(written_files)}\n")
        f.write(f"Export file: {output_file}\n")
        f.write(f"Export size: {os.path.getsize(output_file):,} bytes\n")
        f.write("=" * 80 + "\n")

    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    file_size_mb = os.path.getsize(output_file) / 1024 / 1024
    print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤: {output_file}")
    print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.2f} MB")
    print(f"üìÅ –í–∫–ª—é—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(written_files)}")

    if file_size_mb > 10:
        print("\n‚ö†Ô∏è  –§–∞–π–ª –±–æ–ª—å—à–µ 10 MB, –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —á–∞—Ç–æ–≤")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤")


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(
        description="–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
    )
    parser.add_argument(
        "-o",
        "--output",
        default="project_export.txt",
        help="–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: project_export.txt)",
    )
    parser.add_argument(
        "--include-data", action="store_true", help="–í–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data/"
    )

    args = parser.parse_args()

    export_project(args.output, args.include_data)
