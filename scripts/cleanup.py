#!/usr/bin/env python
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ª–æ–≥–æ–≤"""

import shutil
import sys
from datetime import datetime, timedelta
from pathlib import Path

from semantic_search.config import CACHE_DIR, DATA_DIR, LOGS_DIR, MODELS_DIR, TEMP_DIR

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root / "src"))


def format_file_size(size_bytes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    for unit in ["B", "KB", "MB", "GB"]:
        if size_bytes < 1024.0:
            return f"{size_bytes:.1f} {unit}"
        size_bytes /= 1024.0
    return f"{size_bytes:.1f} TB"


def get_directory_size(directory: Path) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    total_size = 0
    if directory.exists():
        for file_path in directory.rglob("*"):
            if file_path.is_file():
                total_size += file_path.stat().st_size
    return total_size


def clean_temp_files():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")

    if not TEMP_DIR.exists():
        print("   ‚ÑπÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è temp –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return 0

    temp_files = list(TEMP_DIR.rglob("*"))
    temp_size = get_directory_size(TEMP_DIR)

    if not temp_files:
        print("   ‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return 0

    print(f"   üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len([f for f in temp_files if f.is_file()])}")
    print(f"   üíæ –†–∞–∑–º–µ—Ä: {format_file_size(temp_size)}")

    try:
        shutil.rmtree(TEMP_DIR)
        TEMP_DIR.mkdir(exist_ok=True)
        print(f"   ‚úÖ –û—á–∏—â–µ–Ω–æ {format_file_size(temp_size)}")
        return temp_size
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return 0


def clean_old_logs(days: int = 7):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
    print(f"\nüìú –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π...")

    if not LOGS_DIR.exists():
        print("   ‚ÑπÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return 0

    cutoff_date = datetime.now() - timedelta(days=days)
    old_logs = []
    total_size = 0

    for log_file in LOGS_DIR.glob("*.log*"):
        if log_file.is_file():
            modified_time = datetime.fromtimestamp(log_file.stat().st_mtime)
            if modified_time < cutoff_date:
                old_logs.append(log_file)
                total_size += log_file.stat().st_size

    if not old_logs:
        print("   ‚úÖ –°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return 0

    print(f"   üìÅ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: {len(old_logs)}")
    print(f"   üíæ –†–∞–∑–º–µ—Ä: {format_file_size(total_size)}")

    removed_size = 0
    for log_file in old_logs:
        try:
            size = log_file.stat().st_size
            log_file.unlink()
            removed_size += size
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {log_file.name}: {e}")

    print(f"   ‚úÖ –û—á–∏—â–µ–Ω–æ {format_file_size(removed_size)}")
    return removed_size


def clean_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
    print("\nüíæ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...")

    if not CACHE_DIR.exists():
        print("   ‚ÑπÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ç—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return 0

    from semantic_search.utils.cache_manager import CacheManager

    cache_size = get_directory_size(CACHE_DIR)
    cache_files = list(CACHE_DIR.glob("*.pkl"))

    if not cache_files:
        print("   ‚úÖ –ö—ç—à –ø—É—Å—Ç")
        return 0

    print(f"   üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(cache_files)}")
    print(f"   üíæ –†–∞–∑–º–µ—Ä: {format_file_size(cache_size)}")

    cache_manager = CacheManager(CACHE_DIR)
    if cache_manager.clear():
        print(f"   ‚úÖ –û—á–∏—â–µ–Ω–æ {format_file_size(cache_size)}")
        return cache_size
    else:
        print("   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞")
        return 0


def clean_evaluation_results():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ü–µ–Ω–∫–∏"""
    print("\nüìä –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ü–µ–Ω–∫–∏...")

    eval_dir = DATA_DIR / "evaluation_results"
    if not eval_dir.exists():
        print("   ‚ÑπÔ∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return 0

    eval_size = get_directory_size(eval_dir)
    eval_files = list(eval_dir.rglob("*"))

    if not eval_files:
        print("   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return 0

    print(f"   üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len([f for f in eval_files if f.is_file()])}")
    print(f"   üíæ –†–∞–∑–º–µ—Ä: {format_file_size(eval_size)}")

    try:
        shutil.rmtree(eval_dir)
        eval_dir.mkdir(exist_ok=True)
        print(f"   ‚úÖ –û—á–∏—â–µ–Ω–æ {format_file_size(eval_size)}")
        return eval_size
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return 0


def show_disk_usage():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞"""
    print("\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:")
    print("=" * 50)

    directories = [
        (DATA_DIR, "–î–∞–Ω–Ω—ã–µ"),
        (MODELS_DIR, "–ú–æ–¥–µ–ª–∏"),
        (CACHE_DIR, "–ö—ç—à"),
        (TEMP_DIR, "–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"),
        (LOGS_DIR, "–õ–æ–≥–∏"),
        (DATA_DIR / "evaluation_results", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏"),
    ]

    total_size = 0
    for directory, name in directories:
        if directory.exists():
            size = get_directory_size(directory)
            total_size += size
            print(f"{name:.<30} {format_file_size(size):>15}")

    print("-" * 50)
    print(f"{'–ò–¢–û–ì–û':.<30} {format_file_size(total_size):>15}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description="–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∫—ç—à–∞")
    parser.add_argument(
        "--all",
        "-a",
        action="store_true",
        help="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –∫—ç—à, —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏)",
    )
    parser.add_argument(
        "--temp", "-t", action="store_true", help="–û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
    )
    parser.add_argument(
        "--cache", "-c", action="store_true", help="–û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫—ç—à"
    )
    parser.add_argument(
        "--logs", "-l", action="store_true", help="–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏"
    )
    parser.add_argument(
        "--eval", "-e", action="store_true", help="–û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏"
    )
    parser.add_argument(
        "--days",
        type=int,
        default=7,
        help="–£–¥–∞–ª—è—Ç—å –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 7)",
    )
    parser.add_argument(
        "--usage", "-u", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞"
    )
    parser.add_argument(
        "--yes", "-y", action="store_true", help="–ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"
    )

    args = parser.parse_args()

    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã —Ñ–ª–∞–≥–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
    if not any([args.all, args.temp, args.cache, args.logs, args.eval, args.usage]):
        args.usage = True

    print("üßπ –£—Ç–∏–ª–∏—Ç–∞ –æ—á–∏—Å—Ç–∫–∏ Semantic Search")
    print("=" * 50)

    if args.usage:
        show_disk_usage()
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –±—É–¥–µ–º –æ—á–∏—â–∞—Ç—å
    actions = []
    if args.all or args.temp:
        actions.append(("–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", clean_temp_files))
    if args.all or args.cache:
        actions.append(("–∫—ç—à", clean_cache))
    if args.all or args.logs:
        actions.append(
            (f"–ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ {args.days} –¥–Ω–µ–π", lambda: clean_old_logs(args.days))
        )
    if args.eval:
        actions.append(("—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏", clean_evaluation_results))

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–æ
    print("\nüéØ –ë—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã:")
    for name, _ in actions:
        print(f"   ‚Ä¢ {name}")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if not args.yes:
        response = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ")
        if response.lower() != "y":
            print("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
    total_cleaned = 0
    for name, action in actions:
        cleaned = action()
        total_cleaned += cleaned

    print(f"\n‚úÖ –í—Å–µ–≥–æ –æ—á–∏—â–µ–Ω–æ: {format_file_size(total_cleaned)}")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)
