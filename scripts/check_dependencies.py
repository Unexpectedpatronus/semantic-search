#!/usr/bin/env python
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""

import importlib
import subprocess
import sys
from pathlib import Path


def check_module(module_name: str, import_name: str = None) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è"""
    import_name = import_name or module_name
    try:
        module = importlib.import_module(import_name)
        version = getattr(module, "__version__", "unknown")
        return True, version
    except ImportError:
        return False, None


def check_spacy_models():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π SpaCy"""
    models = {
        "ru_core_news_sm": "–†—É—Å—Å–∫–∞—è –º–æ–¥–µ–ª—å (–º–∞–ª–µ–Ω—å–∫–∞—è)",
        "en_core_web_sm": "–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –º–æ–¥–µ–ª—å (–º–∞–ª–µ–Ω—å–∫–∞—è)",
    }

    results = {}
    try:
        import spacy

        for model_name, description in models.items():
            try:
                nlp = spacy.load(model_name)
                results[model_name] = (True, description)
            except OSError:
                results[model_name] = (False, description)
    except ImportError:
        for model_name, description in models.items():
            results[model_name] = (False, description)

    return results


def check_system_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    results = {}

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
    python_version = (
        f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}"
    )
    results["Python"] = (
        sys.version_info.major == 3 and 10 <= sys.version_info.minor <= 12,
        python_version,
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Poetry
    try:
        result = subprocess.run(["poetry", "--version"], capture_output=True, text=True)
        if result.returncode == 0:
            version = result.stdout.strip().split()[-1]
            results["Poetry"] = (True, version)
        else:
            results["Poetry"] = (False, None)
    except FileNotFoundError:
        results["Poetry"] = (False, None)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Microsoft Word (—Ç–æ–ª—å–∫–æ –Ω–∞ Windows)
    if sys.platform == "win32":
        try:
            import win32com.client

            word = win32com.client.Dispatch("Word.Application")
            results["Microsoft Word"] = (True, "installed")
            word.Quit()
        except:
            results["Microsoft Word"] = (False, None)

    return results


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Semantic Search")
    print("=" * 60)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    core_dependencies = [
        ("pymupdf", "fitz", "PDF –æ–±—Ä–∞–±–æ—Ç–∫–∞"),
        ("python-docx", "docx", "DOCX –æ–±—Ä–∞–±–æ—Ç–∫–∞"),
        ("spacy", None, "NLP –æ–±—Ä–∞–±–æ—Ç–∫–∞"),
        ("gensim", None, "Doc2Vec –º–æ–¥–µ–ª—å"),
        ("PyQt6", "PyQt6.QtCore", "GUI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"),
        ("loguru", None, "–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"),
        ("click", None, "CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"),
        ("scikit-learn", "sklearn", "ML —É—Ç–∏–ª–∏—Ç—ã"),
        ("psutil", None, "–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
        ("numpy", None, "–ß–∏—Å–ª–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"),
        ("pandas", None, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"),
        ("matplotlib", None, "–ì—Ä–∞—Ñ–∏–∫–∏"),
        ("tqdm", None, "–ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã"),
    ]

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    optional_dependencies = [
        ("openai", None, "OpenAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"),
        ("seaborn", None, "–£–ª—É—á—à–µ–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏"),
    ]

    # Windows-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ
    if sys.platform == "win32":
        core_dependencies.append(("pywin32", "win32com", "DOC –æ–±—Ä–∞–±–æ—Ç–∫–∞"))

    print("\nüì¶ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("-" * 60)

    all_ok = True
    for package_name, import_name, description in core_dependencies:
        installed, version = check_module(package_name, import_name)
        if installed:
            print(f"‚úÖ {package_name:<20} {version:<15} {description}")
        else:
            print(f"‚ùå {package_name:<20} {'–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù':<15} {description}")
            all_ok = False

    print("\nüì¶ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("-" * 60)

    for package_name, import_name, description in optional_dependencies:
        installed, version = check_module(package_name, import_name)
        if installed:
            print(f"‚úÖ {package_name:<20} {version:<15} {description}")
        else:
            print(f"‚ö†Ô∏è  {package_name:<20} {'–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω':<15} {description}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SpaCy –º–æ–¥–µ–ª–µ–π
    print("\nüß† SpaCy –º–æ–¥–µ–ª–∏:")
    print("-" * 60)

    spacy_models = check_spacy_models()
    spacy_ok = True
    for model_name, (installed, description) in spacy_models.items():
        if installed:
            print(f"‚úÖ {model_name:<20} {description}")
        else:
            print(f"‚ùå {model_name:<20} {description} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")
            spacy_ok = False

    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("\nüíª –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("-" * 60)

    system_deps = check_system_dependencies()
    for dep_name, (installed, version) in system_deps.items():
        if installed:
            print(f"‚úÖ {dep_name:<20} {version}")
        else:
            if dep_name == "Microsoft Word":
                print(f"‚ö†Ô∏è  {dep_name:<20} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è .doc —Ñ–∞–π–ª–æ–≤)")
            else:
                print(f"‚ùå {dep_name:<20} –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
                all_ok = False

    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    print("\n" + "=" * 60)

    if all_ok and spacy_ok:
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("\nüöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É:")
        print("   GUI: poetry run semantic-search")
        print("   CLI: poetry run semantic-search-cli --help")
    else:
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏!")

        print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é:")

        if not all_ok:
            print("\n1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
            print("   poetry install")

        if not spacy_ok:
            print("\n2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ SpaCy:")
            print("   poetry run python scripts/setup_spacy.py")
            print("   –∏–ª–∏ –≤—Ä—É—á–Ω—É—é:")
            print("   poetry run python -m spacy download ru_core_news_sm")
            print("   poetry run python -m spacy download en_core_web_sm")

        if not system_deps.get("Poetry", (False, None))[0]:
            print("\n3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Poetry:")
            print("   –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: https://python-poetry.org/docs/#installation")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:")
    print("-" * 60)

    project_root = Path(__file__).parent.parent
    important_paths = [
        (project_root / "src" / "semantic_search", "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥"),
        (project_root / "data", "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö"),
        (project_root / "pyproject.toml", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Poetry"),
    ]

    for path, description in important_paths:
        if path.exists():
            print(f"‚úÖ {str(path.relative_to(project_root)):<30} {description}")
        else:
            print(
                f"‚ùå {str(path.relative_to(project_root)):<30} {description} - –ù–ï –ù–ê–ô–î–ï–ù"
            )


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        import traceback

        traceback.print_exc()
        sys.exit(1)
