# –û–±–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª scripts/setup_spacy.py:

"""–°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ SpaCy –º–æ–¥–µ–ª–µ–π"""

import subprocess
import sys

import click
import spacy
from loguru import logger


def check_spacy_model(model_name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏ SpaCy"""
    try:
        spacy.load(model_name)
        return True
    except OSError:
        return False


def download_spacy_model(model_name: str) -> bool:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ SpaCy"""
    try:
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ {model_name}...")
        subprocess.check_call(
            [sys.executable, "-m", "spacy", "download", model_name],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
        )
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
        return False


@click.command()
@click.option(
    "--russian/--no-russian",
    default=True,
    help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä—É—Å—Å–∫—É—é –º–æ–¥–µ–ª—å",
)
@click.option(
    "--english/--no-english",
    default=True,
    help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫—É—é –º–æ–¥–µ–ª—å",
)
def main(russian: bool, english: bool):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ SpaCy –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤"""

    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SpaCy...")

    try:
        import spacy

        logger.info(f"SpaCy –≤–µ—Ä—Å–∏–∏ {spacy.__version__} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        logger.error("SpaCy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ SpaCy –∫–æ–º–∞–Ω–¥–æ–π: pip install spacy")
        sys.exit(1)

    models_to_install = []

    if russian:
        models_to_install.append(("ru_core_news_sm", "–†—É—Å—Å–∫–∞—è"))
    if english:
        models_to_install.append(("en_core_web_sm", "–ê–Ω–≥–ª–∏–π—Å–∫–∞—è"))

    if not models_to_install:
        logger.warning("–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –Ω–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
        return

    installed_count = 0

    for model_name, model_desc in models_to_install:
        logger.info(f"\n{'=' * 50}")
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {model_desc} –º–æ–¥–µ–ª–∏ ({model_name})...")

        if check_spacy_model(model_name):
            logger.success(f"{model_desc} –º–æ–¥–µ–ª—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –º–æ–¥–µ–ª–∏
            try:
                nlp = spacy.load(model_name)
                test_text = (
                    "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."
                    if "ru" in model_name
                    else "This is a test sentence."
                )
                doc = nlp(test_text)
                logger.info(f"–ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –¢–æ–∫–µ–Ω–æ–≤: {len(doc)}")
                logger.info(f"–Ø–∑—ã–∫: {nlp.lang}")
                logger.info(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {nlp.pipe_names}")
                installed_count += 1

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")

        else:
            logger.warning(f"{model_desc} –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            response = click.confirm(
                f"–•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å {model_desc} –º–æ–¥–µ–ª—å?", default=True
            )
            if response:
                if download_spacy_model(model_name):
                    logger.success(f"{model_desc} –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    if check_spacy_model(model_name):
                        logger.success("–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
                        installed_count += 1
                    else:
                        logger.error("–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å")
                    logger.info(
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Ä—É—á–Ω—É—é: python -m spacy download {model_name}"
                    )
            else:
                logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

    # –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"\n{'=' * 50}")
    logger.info("–ò–¢–û–ì–ò –£–°–¢–ê–ù–û–í–ö–ò:")
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {installed_count} –∏–∑ {len(models_to_install)}")

    if installed_count == len(models_to_install):
        logger.success("‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    elif installed_count > 0:
        logger.warning("‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ –≤—Å–µ –º–æ–¥–µ–ª–∏")
    else:
        logger.error("‚ùå –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info("\nüìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ SpaCy:")
    logger.info("–†—É—Å—Å–∫–∏–µ:")
    logger.info("  - ru_core_news_sm (–º–∞–ª–µ–Ω—å–∫–∞—è, ~15 –ú–ë)")
    logger.info("  - ru_core_news_md (—Å—Ä–µ–¥–Ω—è—è, ~45 –ú–ë)")
    logger.info("  - ru_core_news_lg (–±–æ–ª—å—à–∞—è, ~500 –ú–ë)")
    logger.info("\n–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ:")
    logger.info("  - en_core_web_sm (–º–∞–ª–µ–Ω—å–∫–∞—è, ~15 –ú–ë)")
    logger.info("  - en_core_web_md (—Å—Ä–µ–¥–Ω—è—è, ~40 –ú–ë)")
    logger.info("  - en_core_web_lg (–±–æ–ª—å—à–∞—è, ~400 –ú–ë)")
    logger.info("  - en_core_web_trf (transformer, ~450 –ú–ë)")


if __name__ == "__main__":
    main()
