"""–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é PyInstaller"""

import argparse
import shutil
import sys
from pathlib import Path


def clean_build_dirs():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å–±–æ—Ä–∫–∏"""
    dirs_to_clean = ["build", "dist"]
    for dir_name in dirs_to_clean:
        if Path(dir_name).exists():
            shutil.rmtree(dir_name)
            print(f"‚úì –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}")


def create_spec_file(onefile=False, windowed=True, name="SemanticSearch"):
    """–°–æ–∑–¥–∞–Ω–∏–µ spec —Ñ–∞–π–ª–∞ –¥–ª—è PyInstaller"""

    # –ü—É—Ç–∏
    src_path = Path(__file__).parent.parent / "src"
    main_script = src_path / "semantic_search" / "main.py"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    datas = [
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        ("config", "config"),
        # –ò–∫–æ–Ω–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        # ("assets/icon.ico", "assets"),
    ]

    # –°–∫—Ä—ã—Ç—ã–µ –∏–º–ø–æ—Ä—Ç—ã
    hidden_imports = [
        "semantic_search",
        "semantic_search.core",
        "semantic_search.gui",
        "semantic_search.utils",
        "semantic_search.evaluation",
        "PyQt6.QtCore",
        "PyQt6.QtGui",
        "PyQt6.QtWidgets",
        "gensim.models.doc2vec",
        "sklearn.metrics.pairwise",
        "spacy",
        "click",
        "loguru",
        "docx",
        "pymupdf",
    ]

    # –ò—Å–∫–ª—é—á–µ–Ω–∏—è
    excludes = [
        "matplotlib",
        "notebook",
        "jupyter",
        "pytest",
        "mypy",
        "ruff",
    ]

    spec_content = f"""# -*- mode: python ; coding: utf-8 -*-

a = Analysis(
    [r'{main_script}'],
    pathex=[r'{src_path}'],
    binaries=[],
    datas={datas},
    hiddenimports={hidden_imports},
    hookspath=[],
    hooksconfig={{}},
    runtime_hooks=[],
    excludes={excludes},
    noarchive=False,
)

pyz = PYZ(a.pure)

"""

    if onefile:
        spec_content += f"""exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.datas,
    [],
    name='{name}',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=not {windowed},
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
)"""
    else:
        spec_content += f"""exe = EXE(
    pyz,
    a.scripts,
    [],
    exclude_binaries=True,
    name='{name}',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    console=not {windowed},
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
)

coll = COLLECT(
    exe,
    a.binaries,
    a.datas,
    strip=False,
    upx=True,
    upx_exclude=[],
    name='{name}',
)"""

    spec_file = Path(f"{name}.spec")
    with open(spec_file, "w", encoding="utf-8") as f:
        f.write(spec_content)

    print(f"‚úì –°–æ–∑–¥–∞–Ω spec —Ñ–∞–π–ª: {spec_file}")
    return spec_file


def build_executable(spec_file, clean=True):
    """–ó–∞–ø—É—Å–∫ PyInstaller –¥–ª—è —Å–±–æ—Ä–∫–∏"""
    import subprocess

    cmd = ["pyinstaller"]

    if clean:
        cmd.append("--clean")

    cmd.extend(["--noconfirm", str(spec_file)])

    print("\nüî® –ó–∞–ø—É—Å–∫ PyInstaller...")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")

    try:
        result = subprocess.run(cmd, check=True)
        print("\n‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {e}")
        return False


def post_build_actions(name="SemanticSearch", onefile=False):
    """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏"""

    if onefile:
        exe_path = Path("dist") / f"{name}.exe"
        if exe_path.exists():
            print(f"\nüì¶ –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {exe_path}")
            print(f"   –†–∞–∑–º–µ—Ä: {exe_path.stat().st_size / 1024 / 1024:.1f} –ú–ë")
    else:
        dist_dir = Path("dist") / name
        if dist_dir.exists():
            exe_path = dist_dir / f"{name}.exe"
            if exe_path.exists():
                print(f"\nüì¶ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ –≤: {dist_dir}")
                print(f"   –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª: {exe_path}")

                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
                for dir_name in ["data", "logs", "config"]:
                    (dist_dir / dir_name).mkdir(exist_ok=True)
                print("   ‚úì –°–æ–∑–¥–∞–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö")

                # –ö–æ–ø–∏—Ä—É–µ–º README
                readme_src = Path("README.md")
                if readme_src.exists():
                    shutil.copy2(readme_src, dist_dir)
                    print("   ‚úì –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω README.md")


def main():
    parser = argparse.ArgumentParser(
        description="–°–±–æ—Ä–∫–∞ Semantic Search –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª"
    )
    parser.add_argument("--onefile", action="store_true", help="–°–æ–±—Ä–∞—Ç—å –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª")
    parser.add_argument(
        "--windowed", action="store_true", help="–ë–µ–∑ –∫–æ–Ω—Å–æ–ª–∏ (GUI —Ä–µ–∂–∏–º)"
    )
    parser.add_argument(
        "--name", default="SemanticSearch", help="–ò–º—è –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞"
    )
    parser.add_argument(
        "--no-clean", action="store_true", help="–ù–µ –æ—á–∏—â–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–±–æ—Ä–∫–∏"
    )

    args = parser.parse_args()

    print("üöÄ Semantic Search Builder")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PyInstaller
    try:
        import PyInstaller

        print(f"‚úì PyInstaller {PyInstaller.__version__} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå PyInstaller –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: poetry add --group dev pyinstaller")
        sys.exit(1)

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–±–æ—Ä–æ–∫
    if not args.no_clean:
        clean_build_dirs()

    # –°–æ–∑–¥–∞–Ω–∏–µ spec —Ñ–∞–π–ª–∞
    spec_file = create_spec_file(
        onefile=args.onefile, windowed=args.windowed, name=args.name
    )

    # –°–±–æ—Ä–∫–∞
    if build_executable(spec_file, clean=not args.no_clean):
        post_build_actions(args.name, args.onefile)

        print("\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:")
        print("   - –î–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ UPX")
        print("   - –î–æ–±–∞–≤—å—Ç–µ –∏–∫–æ–Ω–∫—É –≤ assets/icon.ico")
        print("   - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ —á–∏—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º–µ")

        if args.onefile:
            print("\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ")
            print("   –†–µ–∂–∏–º onefile –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ")
            print("   –∏ –≤—ã–∑—ã–≤–∞—Ç—å –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–≤")
    else:
        print("\n‚ùå –°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        sys.exit(1)


if __name__ == "__main__":
    main()
